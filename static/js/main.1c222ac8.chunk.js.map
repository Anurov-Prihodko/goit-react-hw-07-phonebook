{"version":3,"sources":["App.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","redux/phonebook/contacts-selectors.js","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-reducer.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Spinner/Spinner.js","App.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","getLoading","state","mainState","loading","getFilter","filter","getVisibleContacts","createSelector","contacts","allContacts","normalizedFilter","toLowerCase","trim","name","includes","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","toggleCompletedRequest","toggleCompletedSuccess","toggleCompletedError","changeFilter","axios","defaults","baseURL","createReducer","_","payload","find","alert","id","map","contact","combineReducers","connect","dispatch","addContact","number","completed","post","then","data","catch","error","useState","setName","setNumber","handleChange","event","target","value","className","s","contactEditor","onSubmit","e","preventDefault","label","onChange","textarea","type","pattern","title","required","button","onDeleteContact","contactId","delete","deleteContact","onToggleCompleted","update","patch","toggleCompleted","list","classNames","item","checkbox","checked","text","pug","onClick","Spinner","color","height","width","isLoading","fetchContacts","a","get","totalContactsCount","useSelector","length","completeContactsCount","reduce","acc","useEffect","container","mainTitle","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c222ac8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2admf\",\"mainTitle\":\"App_mainTitle__49V8u\",\"text\":\"App_text__236tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1HTHL\",\"text\":\"Filter_text__2WhMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactEditor\":\"ContactForm_contactEditor__aws5x\",\"textarea\":\"ContactForm_textarea__AEx3E\",\"label\":\"ContactForm_label__1S0d_\",\"button\":\"ContactForm_button__J4RzW\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getAllConatcts = state => state.mainState.contacts;\r\n\r\n// ===== used in App.js =====\r\nexport const getLoading = state => state.mainState.loading;\r\n\r\n// ===== used in Filter.js =====\r\nexport const getFilter = state => state.mainState.filter;\r\n\r\n// ===== used in ContactList.js =====\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllConatcts, getFilter],\r\n\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n    return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\n// ===== Без мемоизации =====\r\n// export const getVisibleContacts = state => {\r\n//   const allContacts = getAllConatcts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('mainState/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('mainState/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('mainState/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('mainState/addContactRequest');\r\nconst addContactSuccess = createAction('mainState/addContactSuccess');\r\nconst addContactError = createAction('mainState/addContactError');\r\n\r\nconst deleteContactRequest = createAction('mainState/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('mainState/deleteContactSuccess');\r\nconst deleteContactError = createAction('mainState/deleteContactError');\r\n\r\nconst toggleCompletedRequest = createAction('mainState/toggleCompletedRequest');\r\nconst toggleCompletedSuccess = createAction('mainState/toggleCompletedSuccess');\r\nconst toggleCompletedError = createAction('mainState/toggleCompletedError');\r\n\r\n// ===== Без json-server =====\r\n\r\n// const addContact = createAction('phonebook/add', (name, number) => ({\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//     completed: false,\r\n//   },\r\n// }));\r\n\r\n// const deleteContact = createAction('phonebook/delete');\r\n// const toggleCompleted = createAction('phonebook/toggleCompleted');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\nexport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//     completed: false,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// const toggleCompleted = contactId => ({\r\n//   type: TOGGLE_COMPLETED,\r\n//   payload: contactId,\r\n// });\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// ===== Асинхронный вариант =====\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/mainState');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/mainState')\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n    completed: false,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/mainState', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/mainState/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst toggleCompleted =\r\n  ({ id, completed }) =>\r\n  dispatch => {\r\n    const update = { completed };\r\n\r\n    dispatch(toggleCompletedRequest());\r\n\r\n    axios\r\n      .patch(`/mainState/${id}`, update)\r\n      .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\r\n      .catch(error => dispatch(toggleCompletedError(error)));\r\n  };\r\n\r\nexport { addContact, deleteContact, toggleCompleted, fetchContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nconst contactsArray = [\r\n  // {\r\n  //   id: '',\r\n  //   name: '',\r\n  //   number: '',\r\n  //   completed: false,\r\n  // },\r\n];\r\n\r\nconst addContactReducer = (state, { payload }) => {\r\n  if (state.find(({ name }) => name === payload.name)) {\r\n    alert(`${payload.name} is already in contacts.`);\r\n    return [...state];\r\n  }\r\n  return [...state, payload];\r\n};\r\n\r\nconst deleteContactReducer = (state, { payload }) =>\r\n  state.filter(({ id }) => id !== payload);\r\n\r\nconst toggleCompletedReducer = (state, { payload }) =>\r\n  state.map(contact => (contact.id === payload.id ? payload : contact));\r\n\r\nconst contacts = createReducer(contactsArray, {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: addContactReducer,\r\n\r\n  // ===== Не через функию =====\r\n\r\n  //   (contactsArray, { payload }) => {\r\n  //   if (contactsArray.find(({ name }) => name === payload.name)) {\r\n  //     alert(`${payload.name} is already in contacts.`);\r\n  //     return [...contactsArray];\r\n  //   }\r\n  //   return [...contactsArray, payload];\r\n  // },\r\n\r\n  [deleteContactSuccess]: deleteContactReducer,\r\n  [toggleCompletedSuccess]: toggleCompletedReducer,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [toggleCompletedRequest]: () => true,\r\n  [toggleCompletedSuccess]: () => false,\r\n  [toggleCompletedError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contacts = (state = contactsArray, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       if (state.find(({ name }) => name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return [...state];\r\n//       }\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     case TOGGLE_COMPLETED:\r\n//       return state.map(contact =>\r\n//         contact.id === payload\r\n//           ? { ...contact, completed: !contact.completed }\r\n//           : contact,\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/phonebook';\nimport { connect } from 'react-redux';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.contactEditor} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport {\n  deleteContact,\n  toggleCompleted,\n  getVisibleContacts,\n} from '../../redux/phonebook';\n\nconst ContactList = ({ contacts, onDeleteContact, onToggleCompleted }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number, completed }) => (\n      <li key={id} className={classNames(s.item, { [s.completed]: completed })}>\n        <input\n          type=\"checkbox\"\n          className={s.checkbox}\n          checked={completed}\n          onChange={() => onToggleCompleted({ id, completed: !completed })}\n        />\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={s.pug}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n\n// ===== Без селекторов =====\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase().trim();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId => dispatch(deleteContact(contactId)),\n  onToggleCompleted: contactId => dispatch(toggleCompleted(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter, getFilter } from '../../redux/phonebook';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input type=\"text\" className={s.text} value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <Loader type=\"Audio\" color=\"#ffed4f\" height={60} width={60} />\r\n    </div>\r\n  );\r\n}\r\n","import { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\nimport Spinner from './components/Spinner/Spinner';\nimport { fetchContacts, getLoading } from './redux/phonebook';\n\nfunction App({ fetchContacts, isLoading }) {\n  const totalContactsCount = useSelector(\n    state => state.mainState.contacts.length,\n  );\n  const completeContactsCount = useSelector(state =>\n    state.mainState.contacts.reduce(\n      (acc, contacts) => (contacts.completed ? acc + 1 : acc),\n      0,\n    ),\n  );\n\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.mainTitle}>Phonebook</h1>\n      <p className={s.text}>All contacts: {totalContactsCount}</p>\n      <p className={s.text}>Number of selected: {completeContactsCount} </p>\n\n      <ContactForm />\n      <h2 className={s.mainTitle}>Contacts</h2>\n      <Filter />\n      {isLoading && <Spinner />}\n      <ContactList />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  fetchContacts: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// ===== ЧЕРЕЗ CONNECT =====\n\n// App.propTypes = {\n//   totalContactsCount: PropTypes.number.isRequired,\n//   completeContactsCount: PropTypes.number.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     totalContactsCount: state.mainState.contacts.length,\n//     completeContactsCount: state.mainState.contacts.reduce(\n//       (acc, contacts) => (contacts.completed ? acc + 1 : acc),\n//       0,\n//     ),\n//   };\n// };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport { contacts } from './phonebook';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    mainState: contacts,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2lQi_\",\"item\":\"ContactList_item__3aB4u\",\"completed\":\"ContactList_completed__2O9sT\",\"pug\":\"ContactList_pug__14zQi\",\"text\":\"ContactList_text__KFvvJ\",\"checkbox\":\"ContactList_checkbox__1lUuo\"};"],"sourceRoot":""}