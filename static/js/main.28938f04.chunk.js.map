{"version":3,"sources":["App.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","redux/phonebook/contacts-selectors.js","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-reducer.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Spinner/Spinner.js","App.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","getAllConatcts","state","mainState","contacts","getLoading","loading","getContactsLength","length","getCompleteContactsCount","createSelector","allContacts","reduce","acc","completed","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","trim","name","includes","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","toggleCompletedRequest","toggleCompletedSuccess","toggleCompletedError","changeFilter","axios","defaults","baseURL","createReducer","_","payload","find","alert","id","map","contact","combineReducers","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","handleChange","event","target","value","className","s","contactEditor","onSubmit","e","preventDefault","post","then","data","catch","error","addContact","label","onChange","textarea","type","pattern","title","required","button","connect","onDeleteContact","contactId","delete","deleteContact","onToggleCompleted","update","patch","toggleCompleted","list","classNames","item","checkbox","checked","text","pug","onClick","Spinner","color","height","width","isLoading","fetchContacts","a","get","totalContactsCount","useSelector","completeContactsCount","useEffect","container","mainTitle","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,uBAAuB,UAAY,uBAAuB,KAAO,oB,mBCA/FD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,KAAO,uB,uCCAvDD,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,SAAW,8BAA8B,MAAQ,2BAA2B,OAAS,8B,2GCCpJC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,UAGnCC,EAAa,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,SACtCC,EAAoB,SAAAL,GAAK,OAAIA,EAAMC,UAAUC,SAASI,QACtDC,EAA2BC,YACtC,CAACT,IACD,SAAAU,GAAW,OACTA,EAAYC,QACV,SAACC,EAAKT,GAAN,OAAoBA,EAASU,UAAYD,EAAM,EAAIA,IACnD,MAKOE,EAAY,SAAAb,GAAK,OAAIA,EAAMC,UAAUa,QAGrCC,EAAqBP,YAChC,CAACT,EAAgBc,IAEjB,SAACJ,EAAaK,GACZ,IAAME,EAAmBF,EAAOG,cAAcC,OAE9C,OAAOT,EAAYK,QAAO,qBAAGK,KACtBF,cAAcG,SAASJ,S,iDCzB5BK,EAAuBC,YAAa,kCACpCC,EAAuBD,YAAa,kCACpCE,EAAqBF,YAAa,gCAElCG,EAAoBH,YAAa,+BACjCI,EAAoBJ,YAAa,+BACjCK,EAAkBL,YAAa,6BAE/BM,EAAuBN,YAAa,kCACpCO,EAAuBP,YAAa,kCACpCQ,EAAqBR,YAAa,gCAElCS,EAAyBT,YAAa,oCACtCU,EAAyBV,YAAa,oCACtCW,EAAuBX,YAAa,kCAgBpCY,EAAeZ,YAAa,0BChBlCa,IAAMC,SAASC,QAAU,wBAGzB,I,0BCsBMnC,EAAWoC,YAvBK,IAuBQ,mBAC3Bf,GAAuB,SAACgB,EAAD,YAAMC,WADF,cAE3Bd,GAhBuB,SAAC1B,EAAD,GAAyB,IAAfwC,EAAc,EAAdA,QAClC,OAAIxC,EAAMyC,MAAK,qBAAGtB,OAAoBqB,EAAQrB,SAC5CuB,MAAM,GAAD,OAAIF,EAAQrB,KAAZ,6BACE,YAAInB,IAEP,GAAN,mBAAWA,GAAX,CAAkBwC,OASU,cAc3BX,GApB0B,SAAC7B,EAAD,OAAUwC,EAAV,EAAUA,QAAV,OAC3BxC,EAAMc,QAAO,qBAAG6B,KAAgBH,QAKJ,cAe3BR,GAlB4B,SAAChC,EAAD,OAAUwC,EAAV,EAAUA,QAAV,OAC7BxC,EAAM4C,KAAI,SAAAC,GAAO,OAAKA,EAAQF,KAAOH,EAAQG,GAAKH,EAAUK,QAEhC,IAkBxB/B,EAASwB,YAAc,GAAD,eACzBJ,GAAe,SAACK,EAAD,YAAMC,YAGlBpC,EAAUkC,aAAc,GAAD,mBAC1BjB,GAAuB,kBAAM,KADH,cAE1BE,GAAuB,kBAAM,KAFH,cAG1BC,GAAqB,kBAAM,KAHD,cAI1BC,GAAoB,kBAAM,KAJA,cAK1BC,GAAoB,kBAAM,KALA,cAM1BC,GAAkB,kBAAM,KANE,cAO1BC,GAAuB,kBAAM,KAPH,cAQ1BC,GAAuB,kBAAM,KARH,cAS1BC,GAAqB,kBAAM,KATD,cAU1BC,GAAyB,kBAAM,KAVL,cAW1BC,GAAyB,kBAAM,KAXL,cAY1BC,GAAuB,kBAAM,KAZH,IAeda,cAAgB,CAC7B5C,WACAY,SACAV,Y,uBC3Ea,SAAS2C,IACtB,MAAwBC,mBAAS,IAAjC,mBAAO7B,EAAP,KAAa8B,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACMC,EAAWC,cAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBrC,EAAR,EAAQA,KAAMsC,EAAd,EAAcA,MAEd,OAAQtC,GACN,IAAK,OACH8B,EAAQQ,GACR,MAEF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,SAWN,OACE,uBAAMC,UAAWC,IAAEC,cAAeC,SARf,SAAAC,GACnBA,EAAEC,iBACFX,EFKe,SAACjC,EAAM+B,GAAP,OAAkB,SAAAE,GACnC,IAAMP,EAAU,CACd1B,OACA+B,SACAtC,WAAW,GAGbwC,EAAS3B,KAETU,IACG6B,KAAK,aAAcnB,GACnBoB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcd,EAAS1B,EAAkBwC,OAC9CC,OAAM,SAAAC,GAAK,OAAIhB,EAASzB,EAAgByC,QEjBhCC,CAAWlD,EAAM+B,IAC1BD,EAAQ,IACRE,EAAU,KAIV,UACE,wBAAOO,UAAWC,IAAEW,MAApB,iBAEE,uBACEb,MAAOtC,EACPoD,SAAUjB,EACVI,UAAWC,IAAEa,SACbC,KAAK,OACLtD,KAAK,OACLuD,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAOlB,UAAWC,IAAEW,MAApB,mBAEE,uBACEb,MAAOP,EACPqB,SAAUjB,EACVI,UAAWC,IAAEa,SACbC,KAAK,MACLtD,KAAK,SACLuD,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQH,KAAK,SAASf,UAAWC,IAAEkB,OAAnC,4B,qCCFSC,eATS,SAAA9E,GAAK,MAAK,CAChCE,SAAUa,EAAmBf,OAGJ,SAAAoD,GAAQ,MAAK,CACtC2B,gBAAiB,SAAAC,GAAS,OAAI5B,EHPV,SAAA4B,GAAS,OAAI,SAAA5B,GACjCA,EAASxB,KAETO,IACG8C,OADH,qBACwBD,IACrBf,MAAK,kBAAMb,EAASvB,EAAqBmD,OACzCb,OAAM,SAAAC,GAAK,OAAIhB,EAAStB,EAAmBsC,QGCPc,CAAcF,KACrDG,kBAAmB,SAAAH,GAAS,OAAI5B,EHEhC,SAAC,GAAD,IAAGT,EAAH,EAAGA,GAAI/B,EAAP,EAAOA,UAAP,OACA,SAAAwC,GACE,IAAMgC,EAAS,CAAExE,aAEjBwC,EAASrB,KAETI,IACGkD,MADH,qBACuB1C,GAAMyC,GAC1BnB,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcd,EAASpB,EAAuBkC,OACnDC,OAAM,SAAAC,GAAK,OAAIhB,EAASnB,EAAqBmC,QGXTkB,CAAgBN,QAG5CF,EAlDK,SAAC,GAAD,IAAG5E,EAAH,EAAGA,SAAU6E,EAAb,EAAaA,gBAAiBI,EAA9B,EAA8BA,kBAA9B,OAClB,oBAAIzB,UAAWC,IAAE4B,KAAjB,SACGrF,EAAS0C,KAAI,gBAAGD,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAM+B,EAAb,EAAaA,OAAQtC,EAArB,EAAqBA,UAArB,OACZ,qBAAa8C,UAAW8B,IAAW7B,IAAE8B,KAAH,eAAY9B,IAAE/C,UAAYA,IAA5D,UACE,uBACE6D,KAAK,WACLf,UAAWC,IAAE+B,SACbC,QAAS/E,EACT2D,SAAU,kBAAMY,EAAkB,CAAExC,KAAI/B,WAAYA,OAEtD,oBAAG8C,UAAWC,IAAEiC,KAAhB,UACGzE,EADH,KACW+B,KAEX,wBACEuB,KAAK,SACLf,UAAWC,IAAEkC,IACbC,QAAS,kBAAMf,EAAgBpC,IAHjC,sBAVOA,W,kBCYAmC,gBARS,SAAA9E,GAAK,MAAK,CAChCyD,MAAO5C,EAAUb,OAGQ,SAAAoD,GAAQ,MAAK,CACtCmB,SAAU,SAAAT,GAAC,OAAIV,EAASlB,EAAa4B,EAAEN,OAAOC,YAGjCqB,EApBA,SAAC,GAAD,IAAGrB,EAAH,EAAGA,MAAOc,EAAV,EAAUA,SAAV,OACb,wBAAOb,UAAWC,KAAEW,MAApB,kCAEE,uBAAOG,KAAK,OAAOf,UAAWC,KAAEiC,KAAMnC,MAAOA,EAAOc,SAAUA,U,8CCNnD,SAASwB,KACtB,OACE,qBAAKrC,UAAU,UAAf,SACE,cAAC,KAAD,CAAQe,KAAK,QAAQuB,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OCqC9D,IAQepB,gBARS,SAAA9E,GAAK,MAAK,CAChCmG,UAAWhG,EAAWH,OAGG,SAAAoD,GAAQ,MAAK,CACtCgD,cAAe,kBAAMhD,EN7BD,uCAAM,WAAMA,GAAN,iBAAAiD,EAAA,6DAC1BjD,EAAS/B,KADiB,kBAIDc,IAAMmE,IAAI,cAJT,gBAIhBpC,EAJgB,EAIhBA,KACRd,EAAS7B,EAAqB2C,IALN,gDAOxBd,EAAS5B,EAAmB,EAAD,KAPH,yDAAN,2DMgCPsD,EApCf,YAA4C,IAA7BsB,EAA4B,EAA5BA,cAAeD,EAAa,EAAbA,UACtBI,EAAqBC,YAAYnG,GACjCoG,EAAwBD,YAAYjG,GAM1C,OAJAmG,qBAAU,WACRN,MACC,CAACA,IAGF,sBAAK1C,UAAWC,KAAEgD,UAAlB,UACE,oBAAIjD,UAAWC,KAAEiD,UAAjB,uBACA,oBAAGlD,UAAWC,KAAEiC,KAAhB,2BAAqCW,KACrC,oBAAG7C,UAAWC,KAAEiC,KAAhB,iCAA2Ca,EAA3C,OAEA,cAAC1D,EAAD,IACA,oBAAIW,UAAWC,KAAEiD,UAAjB,sBACA,cAAC,GAAD,IACCT,GAAa,cAACJ,GAAD,IACd,cAAC,EAAD,U,6BCrBAc,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAWaC,GARDC,YAAe,CAC3BC,QAAS,CACPzH,UAAWC,GAEb2G,cACAc,UAAUC,IClBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SAEE,cAAC,GAAD,QAIJQ,SAASC,eAAe,U,kBCf1BpI,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,UAAY,+BAA+B,IAAM,yBAAyB,KAAO,0BAA0B,SAAW,iC","file":"static/js/main.28938f04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2admf\",\"mainTitle\":\"App_mainTitle__49V8u\",\"text\":\"App_text__236tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1HTHL\",\"text\":\"Filter_text__2WhMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactEditor\":\"ContactForm_contactEditor__aws5x\",\"textarea\":\"ContactForm_textarea__AEx3E\",\"label\":\"ContactForm_label__1S0d_\",\"button\":\"ContactForm_button__J4RzW\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getAllConatcts = state => state.mainState.contacts;\r\n\r\n// ===== used in App.js =====\r\nexport const getLoading = state => state.mainState.loading;\r\nexport const getContactsLength = state => state.mainState.contacts.length;\r\nexport const getCompleteContactsCount = createSelector(\r\n  [getAllConatcts],\r\n  allContacts =>\r\n    allContacts.reduce(\r\n      (acc, contacts) => (contacts.completed ? acc + 1 : acc),\r\n      0,\r\n    ),\r\n);\r\n\r\n// ===== used in Filter.js =====\r\nexport const getFilter = state => state.mainState.filter;\r\n\r\n// ===== used in ContactList.js =====\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllConatcts, getFilter],\r\n\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n    return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\n// ===== Без мемоизации =====\r\n// export const getVisibleContacts = state => {\r\n//   const allContacts = getAllConatcts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('mainState/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('mainState/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('mainState/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('mainState/addContactRequest');\r\nconst addContactSuccess = createAction('mainState/addContactSuccess');\r\nconst addContactError = createAction('mainState/addContactError');\r\n\r\nconst deleteContactRequest = createAction('mainState/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('mainState/deleteContactSuccess');\r\nconst deleteContactError = createAction('mainState/deleteContactError');\r\n\r\nconst toggleCompletedRequest = createAction('mainState/toggleCompletedRequest');\r\nconst toggleCompletedSuccess = createAction('mainState/toggleCompletedSuccess');\r\nconst toggleCompletedError = createAction('mainState/toggleCompletedError');\r\n\r\n// ===== Без json-server =====\r\n\r\n// const addContact = createAction('phonebook/add', (name, number) => ({\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//     completed: false,\r\n//   },\r\n// }));\r\n\r\n// const deleteContact = createAction('phonebook/delete');\r\n// const toggleCompleted = createAction('phonebook/toggleCompleted');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\nexport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//     completed: false,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// const toggleCompleted = contactId => ({\r\n//   type: TOGGLE_COMPLETED,\r\n//   payload: contactId,\r\n// });\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n// ===== Асинхронный вариант =====\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/mainState');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/mainState')\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n    completed: false,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/mainState', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/mainState/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst toggleCompleted =\r\n  ({ id, completed }) =>\r\n  dispatch => {\r\n    const update = { completed };\r\n\r\n    dispatch(toggleCompletedRequest());\r\n\r\n    axios\r\n      .patch(`/mainState/${id}`, update)\r\n      .then(({ data }) => dispatch(toggleCompletedSuccess(data)))\r\n      .catch(error => dispatch(toggleCompletedError(error)));\r\n  };\r\n\r\nexport { addContact, deleteContact, toggleCompleted, fetchContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  toggleCompletedRequest,\r\n  toggleCompletedSuccess,\r\n  toggleCompletedError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nconst contactsArray = [\r\n  // {\r\n  //   id: '',\r\n  //   name: '',\r\n  //   number: '',\r\n  //   completed: false,\r\n  // },\r\n];\r\n\r\nconst addContactReducer = (state, { payload }) => {\r\n  if (state.find(({ name }) => name === payload.name)) {\r\n    alert(`${payload.name} is already in contacts.`);\r\n    return [...state];\r\n  }\r\n  return [...state, payload];\r\n};\r\n\r\nconst deleteContactReducer = (state, { payload }) =>\r\n  state.filter(({ id }) => id !== payload);\r\n\r\nconst toggleCompletedReducer = (state, { payload }) =>\r\n  state.map(contact => (contact.id === payload.id ? payload : contact));\r\n\r\nconst contacts = createReducer(contactsArray, {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: addContactReducer,\r\n\r\n  // ===== Не через функию =====\r\n\r\n  //   (contactsArray, { payload }) => {\r\n  //   if (contactsArray.find(({ name }) => name === payload.name)) {\r\n  //     alert(`${payload.name} is already in contacts.`);\r\n  //     return [...contactsArray];\r\n  //   }\r\n  //   return [...contactsArray, payload];\r\n  // },\r\n\r\n  [deleteContactSuccess]: deleteContactReducer,\r\n  [toggleCompletedSuccess]: toggleCompletedReducer,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [toggleCompletedRequest]: () => true,\r\n  [toggleCompletedSuccess]: () => false,\r\n  [toggleCompletedError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contacts = (state = contactsArray, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       if (state.find(({ name }) => name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return [...state];\r\n//       }\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     case TOGGLE_COMPLETED:\r\n//       return state.map(contact =>\r\n//         contact.id === payload\r\n//           ? { ...contact, completed: !contact.completed }\r\n//           : contact,\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/phonebook';\nimport { useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.contactEditor} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n\n// ===== With connect ======\n\n// const mapDispatchToProps = dispatch => ({\n//   addContact: (name, number) => dispatch(addContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport {\n  deleteContact,\n  toggleCompleted,\n  getVisibleContacts,\n} from '../../redux/phonebook';\n\nconst ContactList = ({ contacts, onDeleteContact, onToggleCompleted }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number, completed }) => (\n      <li key={id} className={classNames(s.item, { [s.completed]: completed })}>\n        <input\n          type=\"checkbox\"\n          className={s.checkbox}\n          checked={completed}\n          onChange={() => onToggleCompleted({ id, completed: !completed })}\n        />\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={s.pug}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n\n// ===== Без селекторов =====\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase().trim();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId => dispatch(deleteContact(contactId)),\n  onToggleCompleted: contactId => dispatch(toggleCompleted(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter, getFilter } from '../../redux/phonebook';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input type=\"text\" className={s.text} value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function Spinner() {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <Loader type=\"Audio\" color=\"#ffed4f\" height={60} width={60} />\r\n    </div>\r\n  );\r\n}\r\n","import { connect, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\nimport Spinner from './components/Spinner/Spinner';\nimport {\n  fetchContacts,\n  getLoading,\n  getContactsLength,\n  getCompleteContactsCount,\n} from './redux/phonebook';\n\nfunction App({ fetchContacts, isLoading }) {\n  const totalContactsCount = useSelector(getContactsLength);\n  const completeContactsCount = useSelector(getCompleteContactsCount);\n\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.mainTitle}>Phonebook</h1>\n      <p className={s.text}>All contacts: {totalContactsCount}</p>\n      <p className={s.text}>Number of selected: {completeContactsCount} </p>\n\n      <ContactForm />\n      <h2 className={s.mainTitle}>Contacts</h2>\n      <Filter />\n      {isLoading && <Spinner />}\n      <ContactList />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  fetchContacts: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// ===== ЧЕРЕЗ CONNECT =====\n\n// App.propTypes = {\n//   totalContactsCount: PropTypes.number.isRequired,\n//   completeContactsCount: PropTypes.number.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     totalContactsCount: state.mainState.contacts.length,\n//     completeContactsCount: state.mainState.contacts.reduce(\n//       (acc, contacts) => (contacts.completed ? acc + 1 : acc),\n//       0,\n//     ),\n//   };\n// };\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport { contacts } from './phonebook';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    mainState: contacts,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2lQi_\",\"item\":\"ContactList_item__3aB4u\",\"completed\":\"ContactList_completed__2O9sT\",\"pug\":\"ContactList_pug__14zQi\",\"text\":\"ContactList_text__KFvvJ\",\"checkbox\":\"ContactList_checkbox__1lUuo\"};"],"sourceRoot":""}